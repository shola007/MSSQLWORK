MODULE2 ASSIGNMENT

 1. SELECT COUNT(PNAME) FROM PROGRAMMER WHERE PROF1 != 'PASCAL' AND 
    PROF1 != 'C' AND PROF2 !='PASCAL' AND PROF2 !='C' ;

 2. SELECT PNAME, CONVERT(VARCHAR, (DOB), 6)DOB,
    CONVERT(VARCHAR, (DOJ), 6)DOJ, GENDER,PROF1, PROF2,SALARY from PROGRAMMER 
    WHERE PROF1 !='CLIPPER' AND PROF1 !='COBOL' AND PROF1 !='PASCAL' AND 
	PROF2!='CLIPPER' AND PROF2!='COBOL' AND PROF2!='PASCAL';
 
 3. SELECT DEVELOPIN, AVG(DCOST)[AVG DCOST], AVG(SCOST)[AVG SCOST], 
    AVG(SCOST)[AVG PRICE/COPY] FROM SOFTWARE GROUP BY DEVELOPIN;
 
 4. SELECT SFT.PNAME , COUNT(SFT.TITTLE)[NUMBER OF PACKAGES] FROM SOFTWARE AS SFT
    INNER JOIN
	PROGRAMMER AS PRG
	ON SFT.PNAME = PRG.PNAME 
	GROUP BY SFT.PNAME;

 5. SELECT ((SCOST * SOLD) - DCOST) AS PROFIT, COUNT(PNAME)[NO OF PROGRAMMERS], 
    COUNT(TITTLE)[NO OF PACKAGES] FROM SOFTWARE 
    GROUP BY ((SCOST * SOLD) - DCOST);
 
 6. SELECT TOP 1 COUNT(TITTLE)[NO OF PACKAGES], 
    DATEDIFF(YEAR, DOJ, GETDATE())[MOST EXPERIENCE] FROM STUDIES AS STD
	INNER JOIN 
	PROGRAMMER AS PRG
	ON STD.PNAME = PRG.PNAME
	INNER JOIN
	SOFTWARE AS SFT
	ON PRG.PNAME = SFT.PNAME
	WHERE INSTITUTE ='BDPS'
	GROUP BY DATEDIFF(YEAR, DOJ, GETDATE()) 
	ORDER BY DATEDIFF(YEAR, DOJ, GETDATE()) DESC;
	
7. SELECT COUNT(TITTLE)[NO OF PACKAGES]FROM SOFTWARE SFT
   INNER JOIN
   PROGRAMMER AS PRG
   ON SFT.PNAME = PRG.PNAME
   WHERE SALARY >
   (SELECT MAX(SALARY)[HIGHEST PAID MALE] FROM PROGRAMMER WHERE GENDER = 'M');

8. SELECT SALARY, STD.COURSE FROM PROGRAMMER AS PRG
   INNER JOIN
   SOFTWARE AS SFT
   ON PRG.PNAME = SFT.PNAME
   INNER JOIN
   STUDIES AS STD
   ON SFT.PNAME = STD.PNAME
   WHERE SOLD =
   (SELECT MAX(SOLD)[HIGHEST SELLING PACKAGES] FROM SOFTWARE);

9. SELECT STD.PNAME, INSTITUTE FROM STUDIES AS STD
   INNER JOIN
   SOFTWARE AS SFT
   ON STD.PNAME = SFT.PNAME
   WHERE SCOST = 
   (SELECT MAX(SCOST)[COSTLIEST PACKAGE] FROM SOFTWARE);

10. SELECT PRG.PNAME FROM SOFTWARE AS SFT
    FULL JOIN
	PROGRAMMER AS PRG
	ON SFT.PNAME = PRG.PNAME
	WHERE TITTLE IS NULL;

11. SELECT * FROM SOFTWARE AS SFT
    INNER JOIN
    PROGRAMMER AS PRG
	ON SFT.PNAME = PRG.PNAME
	WHERE DEVELOPIN != PROF1 AND DEVELOPIN != PROF2;

12. SELECT * FROM SOFTWARE AS SFT
    FULL JOIN
    PROGRAMMER AS PRG
	ON SFT.PNAME = PRG.PNAME
    WHERE GENDER = 'M' AND  DATEPART(YEAR, DOB)<1965
	OR GENDER ='F' AND DATEPART(YEAR, DOB)>1975;
	

13. SELECT  STD.INSTITUTE, COUNT(TITTLE)[NO OF PACKAGES], 
    SUM(SOLD)[NO OF COPIES SOLD],
    SUM(SCOST * SOLD)[SALES VALUE]  FROM SOFTWARE AS SFT
    INNER JOIN
	STUDIES AS STD
	ON SFT.PNAME = STD.PNAME
	GROUP BY INSTITUTE ;

14. SELECT * FROM SOFTWARE AS SFT
    INNER JOIN
	PROGRAMMER AS PRG
	ON SFT.PNAME = PRG.PNAME
	WHERE GENDER = 'M' AND SALARY > 3000 ;

15. SELECT * FROM PROGRAMMER
    WHERE GENDER = 'F' AND SALARY >
   (SELECT MAX(SALARY) FROM PROGRAMMER WHERE GENDER ='M');

16. SELECT * FROM PROGRAMMER 
    WHERE GENDER = 'M' AND SALARY < 
    (SELECT AVG(SALARY) FROM PROGRAMMER WHERE GENDER = 'F');

17.  SELECT DEVELOPIN, MAX(SOLD)[HIGHEST SELLING PACKAGES], 
     MIN(SOLD)[LOWEST SELLING PACKAGES] FROM SOFTWARE 
     GROUP BY DEVELOPIN ;

18.  SELECT TITTLE FROM SOFTWARE 
     WHERE SOLD < (SELECT AVG(SOLD)[AVG NO OF COPIES] FROM SOFTWARE);

19.	 SELECT TOP 1 DCOST,TITTLE [COSTLIEST PACKAGES BY PASCAL] FROM SOFTWARE
     WHERE  DEVELOPIN = 'PASCAL'
	 ORDER BY DCOST DESC;
	 

20.  SELECT SOLD[ NO OF COPIES OF PACKAGE] FROM SOFTWARE 
     WHERE (DCOST -SCOST) = 
     (SELECT TOP 1 (DCOST - SCOST)AS DIFFS FROM SOFTWARE
     ORDER BY DIFFS ASC) ;

21.  
     SELECT TOP 1 DEVELOPIN[LANGUAGE], 
	 MAX(SCOST* SOLD)[HIGHEST SALES AMOUNT] FROM SOFTWARE
	 GROUP BY DEVELOPIN
	 ORDER BY [HIGHEST SALES AMOUNT] DESC ;

22. SELECT TOP 1 PNAME, MIN(SOLD)[LEAST NO OF COPIES] FROM SOFTWARE
    GROUP BY PNAME
	ORDER BY [LEAST NO OF COPIES] ASC ;

23. SELECT COURSE FROM STUDIES 
    WHERE [COURSE FEE] >= ((SELECT AVG([COURSE FEE]) - 1000 FROM STUDIES)) 
	AND
   [COURSE FEE] <= ((SELECT AVG([COURSE FEE])  + 1000 FROM STUDIES));

24. SELECT INSTITUTE, COURSE FROM STUDIES
    WHERE [COURSE FEE] <
    (SELECT AVG([COURSE FEE]) FROM STUDIES);

25. SELECT INSTITUTE FROM STUDIES
     WHERE [COURSE FEE] =
    (SELECT MAX([COURSE FEE])[COSTLIEST COURSE] FROM STUDIES);

26.  SELECT MAX([COURSE FEE]) [COSTLIEST FEE] FROM STUDIES ;

  MODULE3 ASSIGNMENT

1. SELECT MAX(DCOST)[COSTLIEST SOFTWARE IN BASIC] 
   FROM SOFTWARE 
   WHERE DEVELOPIN = 'BASIC' ;

2. SELECT * FROM SOFTWARE 
   WHERE (SCOST * SOLD) > 2000 ;

3. SELECT PNAME, GENDER FROM PROGRAMMER 
   WHERE DATEPART(MONTH, DOB) = DATEPART(MONTH, GETDATE());
  
4. SELECT PNAME, SUM(DCOST)[COST OF PACKAGE] FROM SOFTWARE
   GROUP BY PNAME;

5. SELECT PNAME, SUM(SCOST * SOLD)[SALES VALUE] FROM SOFTWARE
   GROUP BY PNAME;

 6. SELECT PNAME, SUM(SOLD)[NO OF PACKAGE SOLD] FROM SOFTWARE
    GROUP BY PNAME;

 7. SELECT PNAME, MAX(DCOST)[COSTLIEST PACKAGE],
    MIN(DCOST)[CHEAPEST PACKAGE] FROM SOFTWARE
    GROUP BY PNAME;

8. SELECT INSTITUTE, COUNT(COURSE)[NO OF COURSE], 
   AVG([COURSE FEE])[AVG COST] FROM STUDIES
   GROUP BY INSTITUTE;
 
9. SELECT INSTITUTE, COUNT(PNAME)[NO OF STUDENTS] FROM STUDIES
   GROUP BY INSTITUTE;

10. SELECT SFT.PNAME, STD.INSTITUTE FROM SOFTWARE AS SFT
    LEFT JOIN
	STUDIES AS STD
	ON SFT.PNAME = STD.PNAME;

11. SELECT COUNT(SFT.TITTLE)[NO OF PACKAGES] FROM SOFTWARE AS SFT
    INNER JOIN
	STUDIES AS STD
	ON SFT.PNAME = STD.PNAME
	WHERE (STD.[COURSE FEE]) = 
	(SELECT  MIN(STD.[COURSE FEE]) FROM SOFTWARE AS SFT
    INNER JOIN
	STUDIES AS STD
	ON SFT.PNAME = STD.PNAME);  

12. SELECT AVG(PRG.SALARY)[AVG SALARY] FROM SOFTWARE AS SFT
    INNER JOIN 
	PROGRAMMER AS PRG
	ON SFT.PNAME = PRG.PNAME
	WHERE ((SFT.SCOST) * (SFT.SOLD)) > 50000;

13. SELECT PROF1[LANGUAGES] FROM PROGRAMMER WHERE 
    PROF1 NOT IN (SELECT DEVELOPIN FROM SOFTWARE)
    UNION
    SELECT PROF2 FROM PROGRAMMER WHERE 
    PROF2 NOT IN (SELECT DEVELOPIN FROM SOFTWARE);

14. SELECT INSTITUTE, SUM(SCOST * SOLD) AS [TOTAL SALES]
    FROM STUDIES AS STD
	INNER JOIN
	SOFTWARE AS SFT
	ON STD.PNAME = SFT.PNAME
	GROUP BY INSTITUTE

15. SELECT *
    FROM STUDIES AS STD
	INNER JOIN
	SOFTWARE AS SFT
	ON STD.PNAME = SFT.PNAME
	INNER JOIN
	PROGRAMMER AS PRG
	ON SFT.PNAME = PRG.PNAME
	WHERE DEVELOPIN = 'C' AND GENDER ='F'AND INSTITUTE ='PRAGATHI';

16.  SELECT SFT. * FROM SOFTWARE AS SFT
     INNER JOIN
	 PROGRAMMER AS PRG
	 ON SFT.PNAME = PRG.PNAME
	 WHERE DEVELOPIN = 'PASCAL' AND GENDER = 'F';

17. SELECT TOP 2 PROF1, PROF2, COUNT(PNAME)LANGUAGES 
    FROM PROGRAMMER GROUP BY PROF1,PROF2 ORDER BY LANGUAGES DESC;

18. SELECT PNAME FROM SOFTWARE WHERE SCOST = 
   (SELECT MAX(SCOST)[COSTLIEST PACKAGES] FROM SOFTWARE);
	

19. SELECT TITTLE FROM SOFTWARE WHERE DCOST =
    (SELECT MAX(DCOST) FROM SOFTWARE); 

20. SELECT PNAME FROM PROGRAMMER WHERE GENDER = 'F' AND SALARY = 
    (SELECT MAX(SALARY) FROM PROGRAMMER WHERE 
	PROF1 ='COBOL' OR PROF2 = 'COBOL');

21.  SELECT SFT.PNAME, SFT.TITTLE  FROM PROGRAMMER AS PRG
     INNER JOIN 
	 SOFTWARE AS SFT
	 ON PRG.PNAME = SFT.PNAME
     WHERE GENDER = 'F' AND SALARY = 
     (SELECT MAX(SALARY) FROM PROGRAMMER WHERE 
	 PROF1 ='COBOL' OR PROF2 = 'COBOL');

22. SELECT COUNT(TITTLE)[NO OF PACKAGES], DEVELOPIN AS LANGUAGES FROM SOFTWARE 
     WHERE DEVELOPIN != 'C' AND DEVELOPIN != 'C++'
	 GROUP BY DEVELOPIN;

23. SELECT TITTLE AS PACKAGES, AVG(DCOST - SCOST)[AVG DIFFRENECE]
    FROM SOFTWARE 
	GROUP BY TITTLE;

24. SELECT PNAME,SUM(SCOST)[TOTAL SCOST], SUM(DCOST)[TOTAL DCOST], 
    SUM((SCOST * SOLD) - DCOST)[AMT TO RECOVER]
    FROM SOFTWARE WHERE 
    ((SCOST * SOLD)) < DCOST
     GROUP BY PNAME ;
   
25. SELECT TOP 1 PNAME,MAX(SALARY)[HIGHEST SALARY] FROM PROGRAMMER 
    WHERE PROF1 = 'C' OR PROF2 = 'C'
	GROUP BY PNAME
	ORDER BY [HIGHEST SALARY] DESC

26. SELECT PNAME FROM PROGRAMMER WHERE GENDER = 'F' AND SALARY = 
    (SELECT MAX(SALARY) FROM PROGRAMMER WHERE 
	PROF1 ='COBOL' OR PROF2 = 'COBOL');

